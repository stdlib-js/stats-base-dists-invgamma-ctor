{"version":3,"file":"index.mjs","sources":["../lib/ctor.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar entropy = require( '@stdlib/stats-base-dists-invgamma-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-invgamma-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-invgamma-mean' );\nvar mode = require( '@stdlib/stats-base-dists-invgamma-mode' );\nvar quantile = require( '@stdlib/stats-base-dists-invgamma-quantile' );\nvar logpdf = require( '@stdlib/stats-base-dists-invgamma-logpdf' );\nvar skewness = require( '@stdlib/stats-base-dists-invgamma-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-invgamma-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-invgamma-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-invgamma-cdf' );\nvar pdf = require( '@stdlib/stats-base-dists-invgamma-pdf' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction invgammaCDF( x ) {\n\treturn cdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction invgammaLogPDF( x ) {\n\treturn logpdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction invgammaPDF( x ) {\n\treturn pdf( x, this.alpha, this.beta );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction invgammaQuantile( p ) {\n\treturn quantile( p, this.alpha, this.beta );\n}\n\n\n// MAIN //\n\n/**\n* Inverse gamma distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [alpha=1.0] - shape parameter\n* @param {PositiveNumber} [beta=1.0] - scale parameter\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @returns {InvGamma} distribution instance\n*\n* @example\n* var invgamma = new InvGamma( 1.0, 1.0 );\n*\n* var y = invgamma.cdf( 0.8 );\n* // returns ~0.287\n*\n* var v = invgamma.mode;\n* // returns 0.5\n*/\nfunction InvGamma() {\n\tvar alpha;\n\tvar beta;\n\tif ( !(this instanceof InvGamma) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new InvGamma();\n\t\t}\n\t\treturn new InvGamma( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\tif ( !isPositive( alpha ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First shape parameter `alpha` must be a positive number. Value: `%s`.', alpha ) );\n\t\t}\n\t\tif ( !isPositive( beta ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second shape parameter `beta` must be a positive number. Value: `%s`.', beta ) );\n\t\t}\n\t} else {\n\t\talpha = 1.0;\n\t\tbeta = 1.0;\n\t}\n\tdefineProperty( this, 'alpha', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn alpha;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid value. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\talpha = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'beta', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn beta;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid value. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tbeta = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Inverse gamma distribution differential entropy.\n*\n* @name entropy\n* @memberof InvGamma.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var invgamma = new InvGamma( 4.0, 12.0 );\n*\n* var v = invgamma.entropy;\n* // returns ~1.996\n*/\nsetReadOnlyAccessor( InvGamma.prototype, 'entropy', function get() {\n\treturn entropy( this.alpha, this.beta );\n});\n\n/**\n* Inverse gamma distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof InvGamma.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var invgamma = new InvGamma( 6.0, 12.0 );\n*\n* var v = invgamma.kurtosis;\n* // returns 19.0\n*/\nsetReadOnlyAccessor( InvGamma.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.alpha, this.beta );\n});\n\n/**\n* Inverse gamma distribution expected value.\n*\n* @name mean\n* @memberof InvGamma.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var invgamma = new InvGamma( 4.0, 12.0 );\n*\n* var v = invgamma.mean;\n* // returns 4.0\n*/\nsetReadOnlyAccessor( InvGamma.prototype, 'mean', function get() {\n\treturn mean( this.alpha, this.beta );\n});\n\n/**\n* Inverse gamma distribution mode.\n*\n* @name mode\n* @memberof InvGamma.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var invgamma = new InvGamma( 4.0, 12.0 );\n*\n* var v = invgamma.mode;\n* // returns 2.4\n*/\nsetReadOnlyAccessor( InvGamma.prototype, 'mode', function get() {\n\treturn mode( this.alpha, this.beta );\n});\n\n/**\n* Inverse gamma distribution skewness.\n*\n* @name skewness\n* @memberof InvGamma.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var invgamma = new InvGamma( 4.0, 12.0 );\n*\n* var v = invgamma.skewness;\n* // returns ~5.657\n*/\nsetReadOnlyAccessor( InvGamma.prototype, 'skewness', function get() {\n\treturn skewness( this.alpha, this.beta );\n});\n\n/**\n* Inverse gamma distribution standard deviation.\n*\n* @name stdev\n* @memberof InvGamma.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var invgamma = new InvGamma( 4.0, 12.0 );\n*\n* var v = invgamma.stdev;\n* // returns ~2.828\n*/\nsetReadOnlyAccessor( InvGamma.prototype, 'stdev', function get() {\n\treturn stdev( this.alpha, this.beta );\n});\n\n/**\n* Inverse gamma distribution variance.\n*\n* @name variance\n* @memberof InvGamma.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var invgamma = new InvGamma( 4.0, 12.0 );\n*\n* var v = invgamma.variance;\n* // returns 8.0\n*/\nsetReadOnlyAccessor( InvGamma.prototype, 'variance', function get() {\n\treturn variance( this.alpha, this.beta );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof InvGamma.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var invgamma = new InvGamma( 2.0, 4.0 );\n*\n* var v = invgamma.cdf( 0.5 );\n* // returns ~0.003\n*/\nsetReadOnly( InvGamma.prototype, 'cdf', invgammaCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @name logpdf\n* @memberof InvGamma.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var invgamma = new InvGamma( 2.0, 4.0 );\n*\n* var v = invgamma.logpdf( 0.8 );\n* // returns ~-1.558\n*/\nsetReadOnly( InvGamma.prototype, 'logpdf', invgammaLogPDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof InvGamma.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var invgamma = new InvGamma( 2.0, 4.0 );\n*\n* var v = invgamma.pdf( 0.8 );\n* // returns ~0.211\n*/\nsetReadOnly( InvGamma.prototype, 'pdf', invgammaPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof InvGamma.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var invgamma = new InvGamma( 2.0, 4.0 );\n*\n* var v = invgamma.quantile( 0.5 );\n* // returns ~2.383\n*/\nsetReadOnly( InvGamma.prototype, 'quantile', invgammaQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = InvGamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Inverse gamma distribution constructor.\n*\n* @module @stdlib/stats-base-dists-invgamma-ctor\n*\n* @example\n* var InvGamma = require( '@stdlib/stats-base-dists-invgamma-ctor' );\n*\n* var invgamma = new InvGamma( 1.0, 1.0 );\n*\n* var y = invgamma.cdf( 0.8 );\n* // returns ~0.287\n*\n* var mode = invgamma.mode;\n* // returns 0.5\n*/\n\n// MODULES //\n\nvar ctor = require( './ctor.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n"],"names":["defineProperty","require$$0","setReadOnly","require$$1","setReadOnlyAccessor","require$$2","isPositive","require$$3","isPrimitive","entropy","require$$4","kurtosis","require$$5","mean","require$$6","mode","require$$7","quantile","require$$8","logpdf","require$$9","skewness","require$$10","stdev","require$$11","variance","require$$12","cdf","require$$13","pdf","require$$14","format","require$$15","InvGamma","alpha","beta","this","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","x","p","lib"],"mappings":";;mjDAwBA,IAAIA,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAaC,EAA+CC,YAC5DC,EAAUC,EACVC,EAAWC,EACXC,EAAOC,EACPC,EAAOC,EACPC,EAAWC,EACXC,EAASC,EACTC,EAAWC,EACXC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAAMC,EACNC,EAASC,EAuEb,SAASC,IACR,IAAIC,EACAC,EACJ,KAAOC,gBAAgBH,GACtB,OAA0B,IAArBI,UAAUC,OACP,IAAIL,EAEL,IAAIA,EAAUI,UAAW,GAAKA,UAAW,IAEjD,GAAKA,UAAUC,OAAS,CAGvB,GADAH,EAAOE,UAAW,IACZ/B,EAFN4B,EAAQG,UAAW,IAGlB,MAAM,IAAIE,UAAWR,EAAQ,0FAA2FG,IAEzH,IAAM5B,EAAY6B,GACjB,MAAM,IAAII,UAAWR,EAAQ,0FAA2FI,SAGzHD,EAAQ,EACRC,EAAO,EA4BR,OA1BAnC,EAAgBoC,KAAM,QAAS,CAC9BI,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOR,GAERS,IAAO,SAAcC,GACpB,IAAMtC,EAAYsC,GACjB,MAAM,IAAIL,UAAWR,EAAQ,yDAA0Da,IAExFV,EAAQU,KAGV5C,EAAgBoC,KAAM,OAAQ,CAC7BI,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOP,GAERQ,IAAO,SAAcC,GACpB,IAAMtC,EAAYsC,GACjB,MAAM,IAAIL,UAAWR,EAAQ,yDAA0Da,IAExFT,EAAOS,KAGFR,KAiBRhC,EAAqB6B,EAASY,UAAW,WAAW,WACnD,OAAOpC,EAAS2B,KAAKF,MAAOE,KAAKD,SAiBlC/B,EAAqB6B,EAASY,UAAW,YAAY,WACpD,OAAOlC,EAAUyB,KAAKF,MAAOE,KAAKD,SAiBnC/B,EAAqB6B,EAASY,UAAW,QAAQ,WAChD,OAAOhC,EAAMuB,KAAKF,MAAOE,KAAKD,SAiB/B/B,EAAqB6B,EAASY,UAAW,QAAQ,WAChD,OAAO9B,EAAMqB,KAAKF,MAAOE,KAAKD,SAiB/B/B,EAAqB6B,EAASY,UAAW,YAAY,WACpD,OAAOxB,EAAUe,KAAKF,MAAOE,KAAKD,SAiBnC/B,EAAqB6B,EAASY,UAAW,SAAS,WACjD,OAAOtB,EAAOa,KAAKF,MAAOE,KAAKD,SAiBhC/B,EAAqB6B,EAASY,UAAW,YAAY,WACpD,OAAOpB,EAAUW,KAAKF,MAAOE,KAAKD,SAmBnCjC,EAAa+B,EAASY,UAAW,OA5PjC,SAAsBC,GACrB,OAAOnB,EAAKmB,EAAGV,KAAKF,MAAOE,KAAKD,SA6QjCjC,EAAa+B,EAASY,UAAW,UAnQjC,SAAyBC,GACxB,OAAO3B,EAAQ2B,EAAGV,KAAKF,MAAOE,KAAKD,SAoRpCjC,EAAa+B,EAASY,UAAW,OA1QjC,SAAsBC,GACrB,OAAOjB,EAAKiB,EAAGV,KAAKF,MAAOE,KAAKD,SA2RjCjC,EAAa+B,EAASY,UAAW,YAjRjC,SAA2BE,GAC1B,OAAO9B,EAAU8B,EAAGX,KAAKF,MAAOE,KAAKD,SAqRtC,IC9TAa,ED8TiBf"}